  const exportToImage = async () => {
    if (!elementId) {
      console.warn('Element ID not provided for image export');
      return;
    }

    const element = document.getElementById(elementId);
    if (!element) {
      console.error(`Element with ID '${elementId}' not found for image export`);
      return;
    }

    // Create a clone of the element to avoid affecting the original
    const clonedElement = element.cloneNode(true) as HTMLElement;
    clonedElement.style.position = 'absolute';
    clonedElement.style.left = '-9999px';
    clonedElement.style.visibility = 'visible';
    document.body.appendChild(clonedElement);
    
    try {
      // Replace oklch colors in the clone
      const restoreStyles = replaceOklchColors(clonedElement);
      
      // Force a reflow to ensure styles are applied
      clonedElement.offsetHeight;
      
      const canvas = await html2canvas(clonedElement, {
        scale: 2,
        logging: true,
        backgroundColor: '#ffffff',
        removeContainer: true,
        allowTaint: true,
        foreignObjectRendering: false,
        useCORS: true
      });
      
      const link = document.createElement('a');
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      
      canvas.toBlob((blob) => {
        if (!blob) {
          console.error('Failed to create image blob');
          return;
        }
        
        const url = URL.createObjectURL(blob);
        link.href = url;
        link.download = `${fileName}_${timestamp}.png`;
        
        document.body.appendChild(link);
        
        // Trigger download
        link.click();
        
        // Cleanup
        setTimeout(() => {
          document.body.removeChild(link);
          URL.revokeObjectURL(url);
        }, 100);
      }, 'image/png', 0.9); // Add quality parameter (0-1)
    } catch (error) {
      console.error("Image export error:", error);
    } finally {
      // Clean up
      if (clonedElement && clonedElement.parentNode) {
        document.body.removeChild(clonedElement);
      }
    }
  };
